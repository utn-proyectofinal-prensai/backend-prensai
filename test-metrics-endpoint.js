const fetch = require('node-fetch');

async function testMetricsEndpoint() {
  try {
    console.log('üß™ Probando endpoint de m√©tricas...\n');

    // Obtener algunas noticias de prueba
    console.log('üì∞ Obteniendo noticias de prueba...');
    const newsResponse = await fetch('http://localhost:3000/api/news?limit=10');
    const newsData = await newsResponse.json();
    
    if (!newsData.noticias || newsData.noticias.length === 0) {
      console.log('‚ùå No se encontraron noticias para probar');
      return;
    }

    const newsIds = newsData.noticias.map(n => n.id).slice(0, 5);
    console.log(`‚úÖ Obtenidas ${newsIds.length} noticias para el test`);

    // Probar el endpoint de m√©tricas
    console.log('\nüìä Calculando m√©tricas...');
    const metricsResponse = await fetch('http://localhost:3000/api/news/metrics', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ newsIds: newsIds })
    });

    const data = await metricsResponse.json();

    if (metricsResponse.ok) {
      console.log('‚úÖ M√©tricas calculadas exitosamente\n');
      
      console.log('üìà RESUMEN GENERAL:');
      console.log(`  - Total noticias: ${data.metricas.totalNoticias}`);
      console.log(`  - Medios √∫nicos: ${data.metricas.resumen.mediosUnicos}`);
      console.log(`  - Temas √∫nicos: ${data.metricas.resumen.temasUnicos}`);
      console.log(`  - Rango de d√≠as: ${data.metricas.resumen.rangoDias}`);
      console.log(`  - Fecha m√°s antigua: ${data.metricas.resumen.fechaMasAntigua}`);
      console.log(`  - Fecha m√°s reciente: ${data.metricas.resumen.fechaMasReciente}`);

      // Mostrar an√°lisis de valoraci√≥n
      if (data.metricas.valoracionAnalysis) {
        console.log('\nüìä AN√ÅLISIS DE VALORACI√ìN:');
        console.log(`  - Total noticias: ${data.metricas.valoracionAnalysis.totalNoticias}`);
        console.log(`  - Valoraciones negativas: ${data.metricas.valoracionAnalysis.negativas.cantidad} (${data.metricas.valoracionAnalysis.negativas.porcentaje}%)`);
        console.log(`  - Valoraciones positivas: ${data.metricas.valoracionAnalysis.positivas.cantidad} (${data.metricas.valoracionAnalysis.positivas.porcentaje}%)`);
        console.log(`  - Valoraciones neutras: ${data.metricas.valoracionAnalysis.neutras.cantidad} (${data.metricas.valoracionAnalysis.neutras.porcentaje}%)`);
        console.log(`  - No especificadas: ${data.metricas.valoracionAnalysis.noEspecificadas.cantidad} (${data.metricas.valoracionAnalysis.noEspecificadas.porcentaje}%)`);
        console.log(`  - ¬øEs tema cr√≠tico?: ${data.metricas.valoracionAnalysis.esTemaCritico ? 'S√ç' : 'NO'}`);
        
        if (data.metricas.valoracionAnalysis.esTemaCritico) {
          console.log('  üö® ¬°TEMA CR√çTICO! (5 o m√°s valoraciones negativas)');
        } else {
          console.log('  ‚úÖ Tema no cr√≠tico (menos de 5 valoraciones negativas)');
        }
      }

      // Mostrar an√°lisis de menciones
      if (data.metricas.mencionesAnalysis) {
        console.log('\nüë• AN√ÅLISIS DE MENCIONES:');
        console.log(`  - Total noticias: ${data.metricas.mencionesAnalysis.totalNoticias}`);
        console.log(`  - Menci√≥n 1 con "S√≠": ${data.metricas.mencionesAnalysis.mencion1.cantidad} (${data.metricas.mencionesAnalysis.mencion1.porcentaje}%)`);
        console.log(`  - Menci√≥n 2 con "S√≠": ${data.metricas.mencionesAnalysis.mencion2.cantidad} (${data.metricas.mencionesAnalysis.mencion2.porcentaje}%)`);
        console.log(`  - Menci√≥n 3 con "S√≠": ${data.metricas.mencionesAnalysis.mencion3.cantidad} (${data.metricas.mencionesAnalysis.mencion3.porcentaje}%)`);
        console.log(`  - Menci√≥n 4 con "S√≠": ${data.metricas.mencionesAnalysis.mencion4.cantidad} (${data.metricas.mencionesAnalysis.mencion4.porcentaje}%)`);
        console.log(`  - Menci√≥n 5 con "S√≠": ${data.metricas.mencionesAnalysis.mencion5.cantidad} (${data.metricas.mencionesAnalysis.mencion5.porcentaje}%)`);
      }

      // Mostrar algunas m√©tricas por categor√≠a
      console.log('\nüìã M√âTRICAS POR CATEGOR√çA:');
      
      if (data.metricas.valoracion && data.metricas.valoracion.length > 0) {
        console.log('\n  Valoraciones:');
        data.metricas.valoracion.forEach(item => {
          console.log(`    - ${item.nombre}: ${item.cantidad} (${item.porcentaje}%)`);
        });
      }

      if (data.metricas.medio && data.metricas.medio.length > 0) {
        console.log('\n  Medios:');
        data.metricas.medio.forEach(item => {
          console.log(`    - ${item.nombre}: ${item.cantidad} (${item.porcentaje}%)`);
        });
      }

      if (data.metricas.tema && data.metricas.tema.length > 0) {
        console.log('\n  Temas:');
        data.metricas.tema.forEach(item => {
          console.log(`    - ${item.nombre}: ${item.cantidad} (${item.porcentaje}%)`);
        });
      }

    } else {
      console.log('‚ùå Error al calcular m√©tricas:', data.error);
    }

  } catch (error) {
    console.error('‚ùå Error en el test:', error.message);
  }
}

// Ejecutar el test
testMetricsEndpoint(); 